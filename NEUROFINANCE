{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMrJyPTFvZTyspowWYJKNyq",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/senushidinara/NEUROFINACE/blob/main/NEUROFINANCE\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-9dM4vk2xEfk",
        "outputId": "114f67e1-3f15-4e35-d69e-5d3946a68773"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "=====================================================\n",
            "  ðŸ§  NEUROFINANCE DEMO: Your Brain Meets Your Budget\n",
            "=====================================================\n",
            "\n",
            "--- SCENE 1: Initial State Detection (User is Stressed) ---\n",
            "  > AI Input (FER): Stress Level: 0.85\n",
            "  > AI Input (NLP): Typing Speed: 110 WPM\n",
            "  > AI Output: ECS: 84% | Zone: Green Zone (Safe)\n",
            "\n",
            "--- SCENE 2: User Attempts Risky Transaction ---\n",
            "\n",
            "--- TRANSACTION ATTEMPT ---\n",
            "ðŸ’° Amount: GHS 1000 | Recipient: Urgent Family Contact\n",
            "ðŸ§  Current Emotional Confidence Score (ECS): 84% (Green Zone (Safe))\n",
            "âœ… Emotional Confidence is High. Transaction approved instantly.\n",
            "\n",
            "--- SCENE 3: Dashboard Update & Emotional Progress ---\n",
            "Transaction was successfully delayed and confirmed.\n",
            "\n",
            "=====================================================\n",
            "  DEMO COMPLETE: Emotional Intelligence Verified.\n",
            "=====================================================\n"
          ]
        }
      ],
      "source": [
        "import time\n",
        "import random\n",
        "from typing import Dict, Any\n",
        "\n",
        "# --- ðŸ§  CORE AI LOGIC: The NeuroFinance Engine ---\n",
        "\n",
        "class NeuroFinanceAI:\n",
        "    \"\"\"\n",
        "    Simulates the NeuroFinance AI Core, which fuses emotional and behavioral\n",
        "    metrics to generate an Emotional Confidence Score (ECS) and trigger\n",
        "    transactional interventions.\n",
        "    \"\"\"\n",
        "    def __init__(self):\n",
        "        # Thresholds for intervention\n",
        "        self.IMPULSE_THRESHOLD = 80\n",
        "        self.STRESS_WEIGHT = 0.4\n",
        "        self.TYPING_WEIGHT = 0.3\n",
        "        self.BASE_CONFIDENCE = 100\n",
        "\n",
        "    def detect_vulnerability(self,\n",
        "                             stress_level: float,\n",
        "                             typing_wpm: int) -> Dict[str, Any]:\n",
        "        \"\"\"\n",
        "        Simulates the multi-modal AI fusion model to determine the user's state.\n",
        "\n",
        "        Args:\n",
        "            stress_level (float): Mock output from Facial Emotion Recognition (FER), 0.0 to 1.0.\n",
        "            typing_wpm (int): Mock output from Keyboard Tone Analyzer (Words Per Minute).\n",
        "\n",
        "        Returns:\n",
        "            Dict[str, Any]: Dictionary containing the calculated ECS and risk state.\n",
        "        \"\"\"\n",
        "        # 1. Normalize and penalize based on input metrics\n",
        "        stress_penalty = max(0, stress_level - 0.5) * 100 * self.STRESS_WEIGHT\n",
        "\n",
        "        # Assume normal typing speed is 60 WPM; penalize fast/impulsive typing\n",
        "        wpm_penalty = max(0, typing_wpm - 60) * 0.1 * self.TYPING_WEIGHT\n",
        "\n",
        "        # 2. Calculate Emotional Confidence Score (ECS)\n",
        "        ecs = self.BASE_CONFIDENCE - stress_penalty - wpm_penalty\n",
        "        ecs = max(50, round(ecs)) # Clamp minimum score for realism\n",
        "\n",
        "        # 3. Determine Risk Zone\n",
        "        if ecs < 60:\n",
        "            risk_zone = \"Red Zone (High Risk)\"\n",
        "        elif ecs < self.IMPULSE_THRESHOLD:\n",
        "            risk_zone = \"Yellow Zone (Moderate Risk)\"\n",
        "        else:\n",
        "            risk_zone = \"Green Zone (Safe)\"\n",
        "\n",
        "        return {\n",
        "            'ecs': ecs,\n",
        "            'risk_zone': risk_zone,\n",
        "            'intervention_needed': ecs < self.IMPULSE_THRESHOLD\n",
        "        }\n",
        "\n",
        "    def process_transaction(self,\n",
        "                            amount: int,\n",
        "                            recipient: str,\n",
        "                            current_state: Dict[str, Any]):\n",
        "        \"\"\"\n",
        "        Enforces the Emotional Checkpoint intervention.\n",
        "        \"\"\"\n",
        "        ecs = current_state['ecs']\n",
        "        print(f\"\\n--- TRANSACTION ATTEMPT ---\")\n",
        "        print(f\"ðŸ’° Amount: GHS {amount} | Recipient: {recipient}\")\n",
        "        print(f\"ðŸ§  Current Emotional Confidence Score (ECS): {ecs}% ({current_state['risk_zone']})\")\n",
        "\n",
        "        if current_state['intervention_needed']:\n",
        "            print(\"\\nðŸš¨ EMOTIONAL CHECKPOINT TRIGGERED ðŸš¨\")\n",
        "            print(\"NeuroFinance Alert: 'You seem under stress. Take 3 seconds to reconsider this transaction.'\")\n",
        "            print(\"...Waiting 3 seconds (Simulating Smart Delay)...\")\n",
        "\n",
        "            # Simulate the user calming down after intervention friction\n",
        "            time.sleep(3)\n",
        "\n",
        "            # Recalculate state (simulated calmed state)\n",
        "            # User took a deep breath, stress drops, typing speed normalizes\n",
        "            calmed_state = self.detect_vulnerability(\n",
        "                stress_level=random.uniform(0.1, 0.3), # Significantly lower stress\n",
        "                typing_wpm=random.randint(40, 60)      # Normal typing speed\n",
        "            )\n",
        "            calmed_ecs = calmed_state['ecs']\n",
        "\n",
        "            print(f\"\\nâœ… CHECKPOINT SUCCESS\")\n",
        "            print(f\"ðŸ§  NEW ECS: {calmed_ecs}% (Emotional confidence restored.)\")\n",
        "            print(f\"Transaction (GHS {amount}) now safe to proceed.\")\n",
        "            return True\n",
        "        else:\n",
        "            print(\"âœ… Emotional Confidence is High. Transaction approved instantly.\")\n",
        "            return True\n",
        "\n",
        "# --- ðŸ§© DEMO USER FLOW EXECUTION ---\n",
        "\n",
        "def run_neurofinance_demo():\n",
        "    \"\"\"\n",
        "    Simulates the 4-Scene Hackathon Demo Pitch.\n",
        "    \"\"\"\n",
        "    print(\"=====================================================\")\n",
        "    print(\"  ðŸ§  NEUROFINANCE DEMO: Your Brain Meets Your Budget\")\n",
        "    print(\"=====================================================\")\n",
        "\n",
        "    ai_model = NeuroFinanceAI()\n",
        "\n",
        "    # --- SCENE 1: Baseline Stress Detection ---\n",
        "    print(\"\\n--- SCENE 1: Initial State Detection (User is Stressed) ---\")\n",
        "\n",
        "    # Mock inputs: High stress (0.8), fast typing (120 WPM)\n",
        "    initial_stress = 0.85\n",
        "    initial_wpm = 110\n",
        "\n",
        "    initial_state = ai_model.detect_vulnerability(initial_stress, initial_wpm)\n",
        "\n",
        "    print(f\"  > AI Input (FER): Stress Level: {initial_stress:.2f}\")\n",
        "    print(f\"  > AI Input (NLP): Typing Speed: {initial_wpm} WPM\")\n",
        "    print(f\"  > AI Output: ECS: {initial_state['ecs']}% | Zone: {initial_state['risk_zone']}\")\n",
        "\n",
        "\n",
        "    # --- SCENE 2: Risky Transaction Attempt (Intervention Triggered) ---\n",
        "    print(\"\\n--- SCENE 2: User Attempts Risky Transaction ---\")\n",
        "\n",
        "    # Transaction: high value, urgent\n",
        "    amount = 1000\n",
        "    recipient = \"Urgent Family Contact\"\n",
        "\n",
        "    ai_model.process_transaction(amount, recipient, initial_state)\n",
        "\n",
        "    # --- SCENE 3: Post-Intervention State (Stabilization) ---\n",
        "    print(\"\\n--- SCENE 3: Dashboard Update & Emotional Progress ---\")\n",
        "\n",
        "    # We can assume the post-intervention state from process_transaction is the \"Stabilized\" state\n",
        "    print(f\"Transaction was successfully delayed and confirmed.\")\n",
        "\n",
        "    final_risk_score = initial_state['ecs']\n",
        "    if final_risk_score < ai_model.IMPULSE_THRESHOLD:\n",
        "        saved_actions = random.randint(5, 15)\n",
        "        print(f\"\\nðŸŽ‰ SUCCESS METRICS\")\n",
        "        print(f\"Dashboard Insight: 'You saved **{saved_actions} impulsive actions** this month.'\")\n",
        "        print(\"Progress: Emotional stability improving ðŸ’ª. NeuroBadge earned!\")\n",
        "\n",
        "    print(\"\\n=====================================================\")\n",
        "    print(\"  DEMO COMPLETE: Emotional Intelligence Verified.\")\n",
        "    print(\"=====================================================\")\n",
        "\n",
        "\n",
        "# Execute the demo\n",
        "if __name__ == \"__main__\":\n",
        "    run_neurofinance_demo()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import time\n",
        "import random\n",
        "from typing import Dict, Any, List\n",
        "from datetime import datetime\n",
        "import numpy as np # Used for advanced vector operations\n",
        "\n",
        "# --- ðŸ§  1. ADVANCED DATA STRUCTURE: NeuroState ---\n",
        "\n",
        "class NeuroState:\n",
        "    \"\"\"\n",
        "    Holds the multi-modal, real-time input data for the AI Fusion Model.\n",
        "    \"\"\"\n",
        "    def __init__(self, stress: float, anxiety: float, wpm: int, errors: int,\n",
        "                 amount: int, recipient_status: str):\n",
        "        # Emotional & Cognitive Inputs (0.0 to 1.0)\n",
        "        self.emotional_stress_fer = stress     # Facial Emotion Recognition (FER) output\n",
        "        self.cognitive_anxiety_hr = anxiety   # Heart Rate / Phone Grip Anxiety\n",
        "\n",
        "        # Typing & NLP Inputs\n",
        "        self.typing_wpm = wpm                 # Words Per Minute (High WPM often means impulsivity)\n",
        "        self.typing_errors = errors           # Backspaces/Errors (High errors often mean distraction)\n",
        "\n",
        "        # Transaction Context (Behavioral Inputs)\n",
        "        self.amount_ghs = amount\n",
        "        self.recipient_status = recipient_status # 'New', 'Known', 'Scam-Flagged'\n",
        "        self.hour_of_day = datetime.now().hour\n",
        "        self.day_of_week = datetime.now().weekday() # Monday=0, Sunday=6\n",
        "\n",
        "# --- ðŸ’¡ 2. AI CORE: Fusion Model & Behavioral Simulation ---\n",
        "\n",
        "class NeuroFinanceEngine:\n",
        "    \"\"\"\n",
        "    The advanced engine that fuses multiple risk vectors into a single\n",
        "    Emotional Confidence Score (ECS).\n",
        "    \"\"\"\n",
        "\n",
        "    def __init__(self):\n",
        "        # Weights for the three risk vectors (must sum to 1.0)\n",
        "        self.W_EMOTIONAL = 0.45\n",
        "        self.W_COGNITIVE = 0.30\n",
        "        self.W_BEHAVIORAL = 0.25\n",
        "\n",
        "        # Intervention Threshold: If ECS drops below 75, intervention triggers.\n",
        "        self.IMPULSE_THRESHOLD = 75\n",
        "\n",
        "    def _mock_decision_tree_predict(self, features: np.ndarray) -> float:\n",
        "        \"\"\"\n",
        "        SIMULATED MACHINE LEARNING MODEL (Decision Tree / Scikit-learn).\n",
        "        Predicts the baseline \"Behavioral Risk\" of a transaction based on context.\n",
        "\n",
        "        Features: [hour_of_day, day_of_week, amount]\n",
        "        \"\"\"\n",
        "        hour, day, amount = features\n",
        "\n",
        "        # Rule 1: High-risk hours (Late night: 22:00 - 05:00)\n",
        "        is_late_night = 1 if hour >= 22 or hour <= 5 else 0\n",
        "\n",
        "        # Rule 2: High-risk days (Weekends: 5, 6 for panic/impulse)\n",
        "        is_weekend = 1 if day >= 5 else 0\n",
        "\n",
        "        # Rule 3: Large, unusual amount (>$1000)\n",
        "        is_large_amount = 1 if amount > 1000 else 0\n",
        "\n",
        "        # Behavioral Risk Score (0 to 100): High score means high risk\n",
        "        risk_score = (is_late_night * 30) + (is_weekend * 20) + (is_large_amount * 50)\n",
        "\n",
        "        return min(risk_score, 100)\n",
        "\n",
        "    def calculate_risk_vector(self, state: NeuroState) -> Dict[str, float]:\n",
        "        \"\"\"\n",
        "        Calculates three independent, normalized risk scores (0-100).\n",
        "        \"\"\"\n",
        "\n",
        "        # 1. EMOTIONAL RISK (From FER/Physiological Data)\n",
        "        # Weighting stress and anxiety highly\n",
        "        emotional_risk = np.average([state.emotional_stress_fer, state.cognitive_anxiety_hr],\n",
        "                                    weights=[0.6, 0.4]) * 100\n",
        "\n",
        "        # 2. COGNITIVE RISK (From Typing/Distraction)\n",
        "        # High WPM (over 100) + High Errors (over 5) increases cognitive risk\n",
        "        wpm_penalty = max(0, state.typing_wpm - 100) * 0.5\n",
        "        error_penalty = state.typing_errors * 5\n",
        "        cognitive_risk = min(wpm_penalty + error_penalty, 100)\n",
        "\n",
        "        # 3. BEHAVIORAL RISK (From Context/Simulated DT Model)\n",
        "        behavioral_features = np.array([state.hour_of_day, state.day_of_week, state.amount_ghs])\n",
        "        behavioral_risk = self._mock_decision_tree_predict(behavioral_features)\n",
        "\n",
        "        # Additional Cybersecurity Check (Flagged recipient adds 30 risk points)\n",
        "        if state.recipient_status == 'Scam-Flagged':\n",
        "            behavioral_risk = min(behavioral_risk + 30, 100)\n",
        "\n",
        "        return {\n",
        "            'emotional': emotional_risk,\n",
        "            'cognitive': cognitive_risk,\n",
        "            'behavioral': behavioral_risk\n",
        "        }\n",
        "\n",
        "    def fuse_and_generate_ecs(self, risk_scores: Dict[str, float]) -> Dict[str, Any]:\n",
        "        \"\"\"\n",
        "        Fuses the three risk vectors into the final Emotional Confidence Score (ECS).\n",
        "        \"\"\"\n",
        "\n",
        "        # Weighted average of risk factors (0-100 scale)\n",
        "        total_risk_score = (\n",
        "            risk_scores['emotional'] * self.W_EMOTIONAL +\n",
        "            risk_scores['cognitive'] * self.W_COGNITIVE +\n",
        "            risk_scores['behavioral'] * self.W_BEHAVIORAL\n",
        "        )\n",
        "\n",
        "        # Final ECS is 100 - Total Risk\n",
        "        ecs = max(0, round(100 - total_risk_score))\n",
        "\n",
        "        # Determine Risk Zone\n",
        "        if ecs < 60:\n",
        "            risk_zone = \"RED ZONE (Critical Risk)\"\n",
        "        elif ecs < self.IMPULSE_THRESHOLD:\n",
        "            risk_zone = \"YELLOW ZONE (Moderate Risk - Intervention Required)\"\n",
        "        else:\n",
        "            risk_zone = \"GREEN ZONE (Safe)\"\n",
        "\n",
        "        return {\n",
        "            'ecs': ecs,\n",
        "            'risk_zone': risk_zone,\n",
        "            'intervention_needed': ecs < self.IMPULSE_THRESHOLD,\n",
        "            'total_risk': round(total_risk_score)\n",
        "        }\n",
        "\n",
        "    def process_transaction(self, state: NeuroState, current_state: Dict[str, Any]):\n",
        "        \"\"\"\n",
        "        Enforces the Emotional Checkpoint intervention.\n",
        "        \"\"\"\n",
        "        ecs = current_state['ecs']\n",
        "        total_risk = current_state['total_risk']\n",
        "\n",
        "        print(f\"\\n--- TRANSACTION ATTEMPT ---\")\n",
        "        print(f\"ðŸ’° Amount: GHS {state.amount_ghs} | Recipient: {state.recipient_status}\")\n",
        "        print(f\"ðŸ§  Total Risk Score: {total_risk}%\")\n",
        "        print(f\"ðŸ§  Current Emotional Confidence Score (ECS): {ecs}% ({current_state['risk_zone']})\")\n",
        "\n",
        "        if current_state['intervention_needed']:\n",
        "            print(\"\\nðŸš¨ðŸš¨ EMOTIONAL CHECKPOINT TRIGGERED ðŸš¨ðŸš¨\")\n",
        "            print(f\"Highest contributing factor: **{max(current_state['risk_factors'], key=current_state['risk_factors'].get).upper()} RISK**\")\n",
        "            print(\"NeuroFinance Alert: 'Your combined risk is high. Take 5 seconds to re-verify this urgent transaction.'\")\n",
        "            print(\"...Simulating Smart Delay (5s) + Calming UI...\")\n",
        "\n",
        "            # Simulate the user calming down after intervention friction\n",
        "            time.sleep(5)\n",
        "\n",
        "            # SCENE 3: Recalculate state (Simulated Calmed State)\n",
        "\n",
        "            # Assume user calms down and checks input after the delay\n",
        "            calmed_state = NeuroState(\n",
        "                stress=random.uniform(0.1, 0.2), # Stress drops significantly\n",
        "                anxiety=random.uniform(0.1, 0.2),\n",
        "                wpm=random.randint(40, 60),      # Typing speed normalizes\n",
        "                errors=random.randint(0, 1),     # Input errors corrected\n",
        "                amount=state.amount_ghs,\n",
        "                recipient_status=state.recipient_status\n",
        "            )\n",
        "\n",
        "            calmed_risk_factors = self.calculate_risk_vector(calmed_state)\n",
        "            calmed_result = self.fuse_and_generate_ecs(calmed_risk_factors)\n",
        "            calmed_ecs = calmed_result['ecs']\n",
        "\n",
        "            print(f\"\\nâœ… CHECKPOINT SUCCESS: Intervention worked.\")\n",
        "            print(f\"ðŸ§  NEW ECS: {calmed_ecs}% (Emotional confidence restored.)\")\n",
        "            print(f\"Transaction (GHS {state.amount_ghs}) now safe to proceed.\")\n",
        "            return True\n",
        "        else:\n",
        "            print(\"âœ… Emotional Confidence is High (ECS > 75). Transaction approved instantly.\")\n",
        "            return True\n",
        "\n",
        "# --- ðŸ§© 3. ADVANCED DEMO USER FLOW EXECUTION ---\n",
        "\n",
        "def run_advanced_neurofinance_demo():\n",
        "    \"\"\"\n",
        "    Simulates the 4-Scene Hackathon Demo Pitch using the advanced engine.\n",
        "    \"\"\"\n",
        "    print(\"=====================================================\")\n",
        "    print(\"  ðŸ§  ADVANCED NEUROFINANCE DEMO: Fusion AI in Action\")\n",
        "    print(\"=====================================================\")\n",
        "\n",
        "    engine = NeuroFinanceEngine()\n",
        "\n",
        "    # --- SCENE 1: High-Risk Initial State Detection ---\n",
        "    print(\"\\n--- SCENE 1: AI FUSION INPUTS (User is Stressed, Impulsive, and Distracted) ---\")\n",
        "\n",
        "    # Mock inputs designed to FAIL the ECS Check (i.e., trigger intervention):\n",
        "    initial_user_state = NeuroState(\n",
        "        stress=0.9,             # High Stress from FER\n",
        "        anxiety=0.7,            # High Anxiety from Phone Grip\n",
        "        wpm=130,                # Very Fast/Impulsive Typing\n",
        "        errors=8,               # High Errors/Backspaces\n",
        "        amount_ghs=1500,        # Large Transaction Amount\n",
        "        recipient_status=\"New\"  # New, Unknown Recipient (Higher Risk)\n",
        "    )\n",
        "\n",
        "    # Calculate all three risk vectors\n",
        "    risk_factors = engine.calculate_risk_vector(initial_user_state)\n",
        "    initial_result = engine.fuse_and_generate_ecs(risk_factors)\n",
        "\n",
        "    print(f\"  > 1. Emotional Risk (FER/HR): {round(risk_factors['emotional'])}%\")\n",
        "    print(f\"  > 2. Cognitive Risk (Typing/Errors): {round(risk_factors['cognitive'])}%\")\n",
        "    print(f\"  > 3. Behavioral Risk (ML Context Model): {round(risk_factors['behavioral'])}%\")\n",
        "    print(f\"\\n  > FUSION OUTPUT: ECS: {initial_result['ecs']}% | Zone: {initial_result['risk_zone']}\")\n",
        "\n",
        "\n",
        "    # --- SCENE 2 & 3: Risky Transaction Attempt (Intervention Triggered & Resolution) ---\n",
        "\n",
        "    # Add risk factors to the result for display in the process_transaction method\n",
        "    initial_result['risk_factors'] = risk_factors\n",
        "    engine.process_transaction(initial_user_state, initial_result)\n",
        "\n",
        "    # --- SCENE 4: Dashboard Update & Gamified Progress ---\n",
        "    print(\"\\n--- SCENE 4: Dashboard Update & Emotional Progress ---\")\n",
        "\n",
        "    final_risk_score = initial_result['ecs']\n",
        "    if final_risk_score < engine.IMPULSE_THRESHOLD:\n",
        "        saved_actions = random.randint(10, 25)\n",
        "        print(f\"ðŸŽ‰ SUCCESS METRICS\")\n",
        "        print(f\"Dashboard Insight: 'You averted a high-risk transaction and saved **{saved_actions} potential impulsive actions** this month.'\")\n",
        "        print(\"Progress: Emotional stability improving ðŸ’ª. **NeuroBadge** earned!\")\n",
        "\n",
        "    print(\"\\n=====================================================\")\n",
        "    print(\"  DEMO COMPLETE: Emotional Intelligence Verified.\")\n",
        "    print(\"=====================================================\")\n",
        "\n",
        "\n",
        "# Execute the advanced demo\n",
        "if __name__ == \"__main__\":\n",
        "    run_advanced_neurofinance_demo()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 397
        },
        "id": "RrQGUjruxz0k",
        "outputId": "ea0e3a5b-cc04-4032-ab77-993add7368b6"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "=====================================================\n",
            "  ðŸ§  ADVANCED NEUROFINANCE DEMO: Fusion AI in Action\n",
            "=====================================================\n",
            "\n",
            "--- SCENE 1: AI FUSION INPUTS (User is Stressed, Impulsive, and Distracted) ---\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "NeuroState.__init__() got an unexpected keyword argument 'amount_ghs'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-990870829.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    230\u001b[0m \u001b[0;31m# Execute the advanced demo\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    231\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 232\u001b[0;31m     \u001b[0mrun_advanced_neurofinance_demo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/tmp/ipython-input-990870829.py\u001b[0m in \u001b[0;36mrun_advanced_neurofinance_demo\u001b[0;34m()\u001b[0m\n\u001b[1;32m    188\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    189\u001b[0m     \u001b[0;31m# Mock inputs designed to FAIL the ECS Check (i.e., trigger intervention):\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 190\u001b[0;31m     initial_user_state = NeuroState(\n\u001b[0m\u001b[1;32m    191\u001b[0m         \u001b[0mstress\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.9\u001b[0m\u001b[0;34m,\u001b[0m             \u001b[0;31m# High Stress from FER\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    192\u001b[0m         \u001b[0manxiety\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.7\u001b[0m\u001b[0;34m,\u001b[0m            \u001b[0;31m# High Anxiety from Phone Grip\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: NeuroState.__init__() got an unexpected keyword argument 'amount_ghs'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import time\n",
        "import random\n",
        "from typing import Dict, Any\n",
        "from datetime import datetime\n",
        "import numpy as np # Used for advanced vector operations\n",
        "\n",
        "# --- ðŸ§  1. ADVANCED DATA STRUCTURE: NeuroState ---\n",
        "\n",
        "class NeuroState:\n",
        "    \"\"\"\n",
        "    Holds the multi-modal, real-time input data for the AI Fusion Model.\n",
        "    \"\"\"\n",
        "    def __init__(self, stress: float, anxiety: float, wpm: int, errors: int,\n",
        "                 amount: int, recipient_status: str):\n",
        "        # Emotional & Cognitive Inputs (0.0 to 1.0)\n",
        "        self.emotional_stress_fer = stress     # Facial Emotion Recognition (FER) output\n",
        "        self.cognitive_anxiety_hr = anxiety   # Heart Rate / Phone Grip Anxiety\n",
        "\n",
        "        # Typing & NLP Inputs\n",
        "        self.typing_wpm = wpm                 # Words Per Minute (High WPM often means impulsivity)\n",
        "        self.typing_errors = errors           # Backspaces/Errors (High errors often mean distraction)\n",
        "\n",
        "        # Transaction Context (Behavioral Inputs)\n",
        "        self.amount_ghs = amount # Renamed internal variable to reflect currency context\n",
        "        self.recipient_status = recipient_status # 'New', 'Known', 'Scam-Flagged'\n",
        "        self.hour_of_day = datetime.now().hour\n",
        "        self.day_of_week = datetime.now().weekday() # Monday=0, Sunday=6\n",
        "\n",
        "# --- ðŸ’¡ 2. AI CORE: Fusion Model & Behavioral Simulation ---\n",
        "\n",
        "class NeuroFinanceEngine:\n",
        "    \"\"\"\n",
        "    The advanced engine that fuses multiple risk vectors into a single\n",
        "    Emotional Confidence Score (ECS).\n",
        "    \"\"\"\n",
        "\n",
        "    def __init__(self):\n",
        "        # Weights for the three risk vectors (must sum to 1.0)\n",
        "        self.W_EMOTIONAL = 0.45\n",
        "        self.W_COGNITIVE = 0.30\n",
        "        self.W_BEHAVIORAL = 0.25\n",
        "\n",
        "        # Intervention Threshold: If ECS drops below 75, intervention triggers.\n",
        "        self.IMPULSE_THRESHOLD = 75\n",
        "\n",
        "    def _mock_decision_tree_predict(self, features: np.ndarray) -> float:\n",
        "        \"\"\"\n",
        "        SIMULATED MACHINE LEARNING MODEL (Decision Tree / Scikit-learn).\n",
        "        Predicts the baseline \"Behavioral Risk\" of a transaction based on context.\n",
        "\n",
        "        Features: [hour_of_day, day_of_week, amount]\n",
        "        \"\"\"\n",
        "        # Note: Features array holds [hour_of_day, day_of_week, amount_ghs]\n",
        "        hour, day, amount = features\n",
        "\n",
        "        # Rule 1: High-risk hours (Late night: 22:00 - 05:00)\n",
        "        is_late_night = 1 if hour >= 22 or hour <= 5 else 0\n",
        "\n",
        "        # Rule 2: High-risk days (Weekends: 5, 6 for panic/impulse)\n",
        "        is_weekend = 1 if day >= 5 else 0\n",
        "\n",
        "        # Rule 3: Large, unusual amount (>$1000)\n",
        "        is_large_amount = 1 if amount > 1000 else 0\n",
        "\n",
        "        # Behavioral Risk Score (0 to 100): High score means high risk\n",
        "        risk_score = (is_late_night * 30) + (is_weekend * 20) + (is_large_amount * 50)\n",
        "\n",
        "        return min(risk_score, 100)\n",
        "\n",
        "    def calculate_risk_vector(self, state: NeuroState) -> Dict[str, float]:\n",
        "        \"\"\"\n",
        "        Calculates three independent, normalized risk scores (0-100).\n",
        "        \"\"\"\n",
        "\n",
        "        # 1. EMOTIONAL RISK (From FER/Physiological Data)\n",
        "        emotional_risk = np.average([state.emotional_stress_fer, state.cognitive_anxiety_hr],\n",
        "                                    weights=[0.6, 0.4]) * 100\n",
        "\n",
        "        # 2. COGNITIVE RISK (From Typing/Distraction)\n",
        "        wpm_penalty = max(0, state.typing_wpm - 100) * 0.5\n",
        "        error_penalty = state.typing_errors * 5\n",
        "        cognitive_risk = min(wpm_penalty + error_penalty, 100)\n",
        "\n",
        "        # 3. BEHAVIORAL RISK (From Context/Simulated DT Model)\n",
        "        behavioral_features = np.array([state.hour_of_day, state.day_of_week, state.amount_ghs])\n",
        "        behavioral_risk = self._mock_decision_tree_predict(behavioral_features)\n",
        "\n",
        "        # Additional Cybersecurity Check (Flagged recipient adds 30 risk points)\n",
        "        if state.recipient_status == 'Scam-Flagged':\n",
        "            behavioral_risk = min(behavioral_risk + 30, 100)\n",
        "\n",
        "        return {\n",
        "            'emotional': emotional_risk,\n",
        "            'cognitive': cognitive_risk,\n",
        "            'behavioral': behavioral_risk\n",
        "        }\n",
        "\n",
        "    def fuse_and_generate_ecs(self, risk_scores: Dict[str, float]) -> Dict[str, Any]:\n",
        "        \"\"\"\n",
        "        Fuses the three risk vectors into the final Emotional Confidence Score (ECS).\n",
        "        \"\"\"\n",
        "\n",
        "        # Weighted average of risk factors (0-100 scale)\n",
        "        total_risk_score = (\n",
        "            risk_scores['emotional'] * self.W_EMOTIONAL +\n",
        "            risk_scores['cognitive'] * self.W_COGNITIVE +\n",
        "            risk_scores['behavioral'] * self.W_BEHAVIORAL\n",
        "        )\n",
        "\n",
        "        # Final ECS is 100 - Total Risk\n",
        "        ecs = max(0, round(100 - total_risk_score))\n",
        "\n",
        "        # Determine Risk Zone\n",
        "        if ecs < 60:\n",
        "            risk_zone = \"RED ZONE (Critical Risk)\"\n",
        "        elif ecs < self.IMPULSE_THRESHOLD:\n",
        "            risk_zone = \"YELLOW ZONE (Moderate Risk - Intervention Required)\"\n",
        "        else:\n",
        "            risk_zone = \"GREEN ZONE (Safe)\"\n",
        "\n",
        "        return {\n",
        "            'ecs': ecs,\n",
        "            'risk_zone': risk_zone,\n",
        "            'intervention_needed': ecs < self.IMPULSE_THRESHOLD,\n",
        "            'total_risk': round(total_risk_score)\n",
        "        }\n",
        "\n",
        "    def process_transaction(self, state: NeuroState, current_state: Dict[str, Any]):\n",
        "        \"\"\"\n",
        "        Enforces the Emotional Checkpoint intervention.\n",
        "        \"\"\"\n",
        "        ecs = current_state['ecs']\n",
        "        total_risk = current_state['total_risk']\n",
        "\n",
        "        print(f\"\\n--- TRANSACTION ATTEMPT ---\")\n",
        "        print(f\"ðŸ’° Amount: GHS {state.amount_ghs} | Recipient: {state.recipient_status}\")\n",
        "        print(f\"ðŸ§  Total Risk Score: {total_risk}%\")\n",
        "        print(f\"ðŸ§  Current Emotional Confidence Score (ECS): {ecs}% ({current_state['risk_zone']})\")\n",
        "\n",
        "        if current_state['intervention_needed']:\n",
        "            print(\"\\nðŸš¨ðŸš¨ EMOTIONAL CHECKPOINT TRIGGERED ðŸš¨ðŸš¨\")\n",
        "            print(f\"Highest contributing factor: **{max(current_state['risk_factors'], key=current_state['risk_factors'].get).upper()} RISK**\")\n",
        "            print(\"NeuroFinance Alert: 'Your combined risk is high. Take 5 seconds to re-verify this urgent transaction.'\")\n",
        "            print(\"...Simulating Smart Delay (5s) + Calming UI...\")\n",
        "\n",
        "            # Simulate the user calming down after intervention friction\n",
        "            time.sleep(5)\n",
        "\n",
        "            # SCENE 3: Recalculate state (Simulated Calmed State)\n",
        "\n",
        "            # Assume user calms down and checks input after the delay\n",
        "            calmed_state = NeuroState(\n",
        "                stress=random.uniform(0.1, 0.2), # Stress drops significantly\n",
        "                anxiety=random.uniform(0.1, 0.2),\n",
        "                wpm=random.randint(40, 60),      # Typing speed normalizes\n",
        "                errors=random.randint(0, 1),     # Input errors corrected\n",
        "                amount=state.amount_ghs,         # Corrected parameter name\n",
        "                recipient_status=state.recipient_status\n",
        "            )\n",
        "\n",
        "            calmed_risk_factors = self.calculate_risk_vector(calmed_state)\n",
        "            calmed_result = self.fuse_and_generate_ecs(calmed_risk_factors)\n",
        "            calmed_ecs = calmed_result['ecs']\n",
        "\n",
        "            print(f\"\\nâœ… CHECKPOINT SUCCESS: Intervention worked.\")\n",
        "            print(f\"ðŸ§  NEW ECS: {calmed_ecs}% (Emotional confidence restored.)\")\n",
        "            print(f\"Transaction (GHS {state.amount_ghs}) now safe to proceed.\")\n",
        "            return True\n",
        "        else:\n",
        "            print(\"âœ… Emotional Confidence is High (ECS > 75). Transaction approved instantly.\")\n",
        "            return True\n",
        "\n",
        "# --- ðŸ§© 3. ADVANCED DEMO USER FLOW EXECUTION ---\n",
        "\n",
        "def run_advanced_neurofinance_demo():\n",
        "    \"\"\"\n",
        "    Simulates the 4-Scene Hackathon Demo Pitch using the advanced engine.\n",
        "    \"\"\"\n",
        "    print(\"=====================================================\")\n",
        "    print(\"  ðŸ§  ADVANCED NEUROFINANCE DEMO: Fusion AI in Action\")\n",
        "    print(\"=====================================================\")\n",
        "\n",
        "    engine = NeuroFinanceEngine()\n",
        "\n",
        "    # --- SCENE 1: High-Risk Initial State Detection ---\n",
        "    print(\"\\n--- SCENE 1: AI FUSION INPUTS (User is Stressed, Impulsive, and Distracted) ---\")\n",
        "\n",
        "    # Mock inputs designed to FAIL the ECS Check (i.e., trigger intervention):\n",
        "    initial_user_state = NeuroState(\n",
        "        stress=0.9,             # High Stress from FER\n",
        "        anxiety=0.7,            # High Anxiety from Phone Grip\n",
        "        wpm=130,                # Very Fast/Impulsive Typing\n",
        "        errors=8,               # High Errors/Backspaces\n",
        "        amount=1500,            # ***FIXED***: Use 'amount' keyword\n",
        "        recipient_status=\"New\"  # New, Unknown Recipient (Higher Risk)\n",
        "    )\n",
        "\n",
        "    # Calculate all three risk vectors\n",
        "    risk_factors = engine.calculate_risk_vector(initial_user_state)\n",
        "    initial_result = engine.fuse_and_generate_ecs(risk_factors)\n",
        "\n",
        "    print(f\"  > 1. Emotional Risk (FER/HR): {round(risk_factors['emotional'])}%\")\n",
        "    print(f\"  > 2. Cognitive Risk (Typing/Errors): {round(risk_factors['cognitive'])}%\")\n",
        "    print(f\"  > 3. Behavioral Risk (ML Context Model): {round(risk_factors['behavioral'])}%\")\n",
        "    print(f\"\\n  > FUSION OUTPUT: ECS: {initial_result['ecs']}% | Zone: {initial_result['risk_zone']}\")\n",
        "\n",
        "\n",
        "    # --- SCENE 2 & 3: Risky Transaction Attempt (Intervention Triggered & Resolution) ---\n",
        "\n",
        "    # Add risk factors to the result for display in the process_transaction method\n",
        "    initial_result['risk_factors'] = risk_factors\n",
        "    engine.process_transaction(initial_user_state, initial_result)\n",
        "\n",
        "    # --- SCENE 4: Dashboard Update & Gamified Progress ---\n",
        "    print(\"\\n--- SCENE 4: Dashboard Update & Emotional Progress ---\")\n",
        "\n",
        "    final_risk_score = initial_result['ecs']\n",
        "    if final_risk_score < engine.IMPULSE_THRESHOLD:\n",
        "        saved_actions = random.randint(10, 25)\n",
        "        print(f\"ðŸŽ‰ SUCCESS METRICS\")\n",
        "        print(f\"Dashboard Insight: 'You averted a high-risk transaction and saved **{saved_actions} potential impulsive actions** this month.'\")\n",
        "        print(\"Progress: Emotional stability improving ðŸ’ª. **NeuroBadge** earned!\")\n",
        "\n",
        "    print(\"\\n=====================================================\")\n",
        "    print(\"  DEMO COMPLETE: Emotional Intelligence Verified.\")\n",
        "    print(\"=====================================================\")\n",
        "\n",
        "\n",
        "# Execute the advanced demo\n",
        "if __name__ == \"__main__\":\n",
        "    run_advanced_neurofinance_demo()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Lbv_Y8HCyDTi",
        "outputId": "6f7ec857-55d9-4ae2-b471-b06a1f8aef49"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "=====================================================\n",
            "  ðŸ§  ADVANCED NEUROFINANCE DEMO: Fusion AI in Action\n",
            "=====================================================\n",
            "\n",
            "--- SCENE 1: AI FUSION INPUTS (User is Stressed, Impulsive, and Distracted) ---\n",
            "  > 1. Emotional Risk (FER/HR): 82%\n",
            "  > 2. Cognitive Risk (Typing/Errors): 55%\n",
            "  > 3. Behavioral Risk (ML Context Model): 50%\n",
            "\n",
            "  > FUSION OUTPUT: ECS: 34% | Zone: RED ZONE (Critical Risk)\n",
            "\n",
            "--- TRANSACTION ATTEMPT ---\n",
            "ðŸ’° Amount: GHS 1500 | Recipient: New\n",
            "ðŸ§  Total Risk Score: 66%\n",
            "ðŸ§  Current Emotional Confidence Score (ECS): 34% (RED ZONE (Critical Risk))\n",
            "\n",
            "ðŸš¨ðŸš¨ EMOTIONAL CHECKPOINT TRIGGERED ðŸš¨ðŸš¨\n",
            "Highest contributing factor: **EMOTIONAL RISK**\n",
            "NeuroFinance Alert: 'Your combined risk is high. Take 5 seconds to re-verify this urgent transaction.'\n",
            "...Simulating Smart Delay (5s) + Calming UI...\n",
            "\n",
            "âœ… CHECKPOINT SUCCESS: Intervention worked.\n",
            "ðŸ§  NEW ECS: 80% (Emotional confidence restored.)\n",
            "Transaction (GHS 1500) now safe to proceed.\n",
            "\n",
            "--- SCENE 4: Dashboard Update & Emotional Progress ---\n",
            "ðŸŽ‰ SUCCESS METRICS\n",
            "Dashboard Insight: 'You averted a high-risk transaction and saved **15 potential impulsive actions** this month.'\n",
            "Progress: Emotional stability improving ðŸ’ª. **NeuroBadge** earned!\n",
            "\n",
            "=====================================================\n",
            "  DEMO COMPLETE: Emotional Intelligence Verified.\n",
            "=====================================================\n"
          ]
        }
      ]
    }
  ]
}